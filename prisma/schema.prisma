datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

// datasource db {
//     provider = "sqlite"
//     url   = env("DATABASE_URL")
// }

generator client {
    provider = "prisma-client-js"
}

model Definition {
    id         String  @id() @default(cuid())
    word       String  @unique
    definition String?
    english    String?
    swahili    String?
    type       String? @default("word")
    dialect    String  @default("all")
    example    String?
}

model Order {
    id           String      @id() @default(cuid())
    device       String?
    contactPhone String?
    status       String?     @default("pending")
    city         String?
    town         String?
    location     String?
    totalAmount  String?
    fullfiled    Boolean?    @default(false)
    items        OrderItem[]
    Payment      Payment[]
}

model Payment {
    id             String  @id() @default(cuid())
    Order          Order?  @relation(fields: [orderId], references: [id])
    transactionRef String?
    status         String? @default("innitiated")
    phone          String?
    orderId        String?
}

model OrderItem {
    id       String  @id() @default(cuid())
    type     String
    word     String?
    color    String?
    back     String?
    size     String?
    price    Int?
    Order    Order?  @relation(fields: [orderId], references: [id])
    orderId  String?
    quantity Int?    @default(1)
}

model BlogContent {
    id         String  @id() @default(cuid())
    title      String?
    coverImage String?
    content    String
    author     User?   @relation(fields: [userId], references: [id])
    userId     String?
    published  Boolean @default(false)
    flagged    Boolean @default(false)
    slug       String  @unique
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    BlogContent   BlogContent[]
}

model VerificationToken {
    id         Int      @id @default(sequence())
    // id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
